#!/usr/bin/env python3
"""
Vehicle GPS Simulator - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏ñ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
"""

import asyncio
import aiohttp
import random
import math
import time
from datetime import datetime, timedelta
from typing import List, Dict
import json

class VehicleSimulator:
    def __init__(self, vehicle_id: str, license_plate: str, vehicle_type: str, 
                 driver_name: str, start_lat: float, start_lng: float):
        self.vehicle_id = vehicle_id
        self.license_plate = license_plate
        self.vehicle_type = vehicle_type
        self.driver_name = driver_name
        
        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.current_lat = start_lat
        self.current_lng = start_lng
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
        self.speed = random.uniform(20, 80)  # km/h
        self.heading = random.uniform(0, 360)  # degrees
        self.is_moving = True
        self.is_idle = False
        self.idle_start_time = None
        
        # ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø)
        self.route_points = [
            (13.7563, 100.5018),  # ‡∏™‡∏¢‡∏≤‡∏°
            (13.7500, 100.5200),  # ‡∏™‡∏µ‡∏•‡∏°
            (13.7300, 100.5400),  # ‡∏™‡∏≤‡∏ó‡∏£
            (13.7200, 100.5600),  # ‡∏ö‡∏≤‡∏á‡∏£‡∏±‡∏Å
            (13.7000, 100.5800),  # ‡∏™‡∏≤‡∏ó‡∏£‡πÉ‡∏ï‡πâ
            (13.6800, 100.6000),  # ‡∏ö‡∏≤‡∏á‡∏ô‡∏≤
            (13.6600, 100.6200),  # ‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏µ
            (13.6400, 100.6400),  # ‡∏ö‡∏≤‡∏á‡∏ö‡πà‡∏≠
            (13.6200, 100.6600),  # ‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏Å‡∏á
            (13.6000, 100.6800),  # ‡∏ö‡∏≤‡∏á‡πÄ‡∏™‡∏≤‡∏ò‡∏á
        ]
        
        self.current_route_index = 0
        self.target_lat, self.target_lng = self.route_points[0]
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.update_interval = random.uniform(10, 30)  # ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.server_url = "http://localhost:17890"
        
    def calculate_distance(self, lat1: float, lng1: float, lat2: float, lng2: float) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î (km)"""
        R = 6371  # ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å (km)
        
        dlat = math.radians(lat2 - lat1)
        dlng = math.radians(lng2 - lng1)
        
        a = (math.sin(dlat/2) * math.sin(dlat/2) + 
             math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * 
             math.sin(dlng/2) * math.sin(dlng/2))
        
        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
        return R * c
    
    def move_towards_target(self):
        """‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"""
        if not self.is_moving:
            return
            
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        distance = self.calculate_distance(
            self.current_lat, self.current_lng,
            self.target_lat, self.target_lng
        )
        
        # ‡∏ñ‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        if distance < 0.5:  # 500 ‡πÄ‡∏°‡∏ï‡∏£
            self.current_route_index = (self.current_route_index + 1) % len(self.route_points)
            self.target_lat, self.target_lng = self.route_points[self.current_route_index]
            distance = self.calculate_distance(
                self.current_lat, self.current_lng,
                self.target_lat, self.target_lng
            )
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
        lat_diff = self.target_lat - self.current_lat
        lng_diff = self.target_lng - self.current_lng
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ
        move_distance = (self.speed / 3600) * self.update_interval / 111.32  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏á‡∏®‡∏≤
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
        if distance > 0:
            ratio = min(move_distance / distance, 1.0)
            self.current_lat += lat_diff * ratio
            self.current_lng += lng_diff * ratio
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            self.heading = math.degrees(math.atan2(lng_diff, lat_diff))
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            self.current_lat += random.uniform(-0.0001, 0.0001)
            self.current_lng += random.uniform(-0.0001, 0.0001)
    
    def simulate_idle_behavior(self):
        """‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á"""
        # ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ 5% ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á
        if random.random() < 0.05 and not self.is_idle:
            self.is_idle = True
            self.is_moving = False
            self.idle_start_time = datetime.now()
            self.speed = 0
            print(f"üöó {self.vehicle_id} ‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà {self.current_lat:.6f}, {self.current_lng:.6f}")
        
        # ‡∏ñ‡πâ‡∏≤‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏¥‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î 30-300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        elif self.is_idle:
            idle_duration = (datetime.now() - self.idle_start_time).total_seconds()
            if idle_duration > random.uniform(30, 300):
                self.is_idle = False
                self.is_moving = True
                self.speed = random.uniform(20, 80)
                print(f"üöó {self.vehicle_id} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    
    async def send_gps_data(self, session: aiohttp.ClientSession):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"""
        try:
            gps_data = {
                "vehicle_id": self.vehicle_id,
                "latitude": self.current_lat,
                "longitude": self.current_lng,
                "speed": self.speed,
                "heading": self.heading,
                "accuracy": random.uniform(3, 8),
                "timestamp": datetime.utcnow().isoformat() + "Z"
            }
            
            async with session.post(
                f"{self.server_url}/api/gps/data",
                json=gps_data,
                timeout=aiohttp.ClientTimeout(total=5)
            ) as response:
                if response.status == 200:
                    print(f"‚úÖ {self.vehicle_id}: GPS data sent successfully")
                else:
                    print(f"‚ùå {self.vehicle_id}: Failed to send GPS data - {response.status}")
                    
        except Exception as e:
            print(f"‚ùå {self.vehicle_id}: Error sending GPS data - {e}")
    
    async def run(self, session: aiohttp.ClientSession):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏£‡∏ñ"""
        print(f"üöó Starting vehicle {self.vehicle_id} ({self.driver_name})")
        
        while True:
            try:
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                self.move_towards_target()
                self.simulate_idle_behavior()
                
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS
                await self.send_gps_data(session)
                
                # ‡∏£‡∏≠‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                await asyncio.sleep(self.update_interval)
                
            except Exception as e:
                print(f"‚ùå {self.vehicle_id}: Error in simulation - {e}")
                await asyncio.sleep(5)

class FleetSimulator:
    def __init__(self):
        self.server_url = "http://localhost:17890"
        self.vehicles = []
        
    def create_fleet(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≠‡∏á‡∏£‡∏ñ‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
        vehicle_data = [
            ("V001", "‡∏Å‡∏Ç-1234", "truck", "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ", 13.7563, 100.5018),
            ("V002", "‡∏Å‡∏Ç-5678", "van", "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏î‡∏µ", 13.7500, 100.5200),
            ("V003", "‡∏Å‡∏Ç-9012", "motorcycle", "‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡πÄ‡∏Å‡πà‡∏á‡∏î‡∏µ", 13.7300, 100.5400),
            ("V004", "‡∏Å‡∏Ç-3456", "car", "‡∏™‡∏°‡∏û‡∏£ ‡∏™‡∏ß‡∏¢‡∏î‡∏µ", 13.7200, 100.5600),
            ("V005", "‡∏Å‡∏Ç-7890", "bus", "‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ ‡∏î‡∏µ‡∏î‡∏µ", 13.7000, 100.5800),
            ("V006", "‡∏Å‡∏Ç-2468", "truck", "‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å", 13.6800, 100.6000),
            ("V007", "‡∏Å‡∏Ç-1357", "van", "‡∏™‡∏°‡∏®‡∏£‡∏µ ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°", 13.6600, 100.6200),
            ("V008", "‡∏Å‡∏Ç-9753", "motorcycle", "‡∏™‡∏°‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå ‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å", 13.6400, 100.6400),
            ("V009", "‡∏Å‡∏Ç-8642", "car", "‡∏™‡∏°‡∏û‡∏£ ‡πÉ‡∏à‡∏î‡∏µ", 13.6200, 100.6600),
            ("V010", "‡∏Å‡∏Ç-7531", "bus", "‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ ‡∏£‡∏±‡∏Å‡∏á‡∏≤‡∏ô", 13.6000, 100.6800),
        ]
        
        for vehicle_id, license_plate, vehicle_type, driver_name, start_lat, start_lng in vehicle_data:
            vehicle = VehicleSimulator(
                vehicle_id, license_plate, vehicle_type, driver_name, start_lat, start_lng
            )
            self.vehicles.append(vehicle)
        
        print(f"üöó Created {len(self.vehicles)} vehicles")
    
    async def register_vehicles(self, session: aiohttp.ClientSession):
        """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"""
        for vehicle in self.vehicles:
            try:
                vehicle_data = {
                    "vehicle_id": vehicle.vehicle_id,
                    "license_plate": vehicle.license_plate,
                    "vehicle_type": vehicle.vehicle_type,
                    "driver_name": vehicle.driver_name,
                    "driver_phone": f"08{random.randint(10000000, 99999999)}"
                }
                
                async with session.post(
                    f"{self.server_url}/api/vehicles/",
                    json=vehicle_data,
                    timeout=aiohttp.ClientTimeout(total=5)
                ) as response:
                    if response.status == 200:
                        print(f"‚úÖ Registered vehicle {vehicle.vehicle_id}")
                    else:
                        print(f"‚ùå Failed to register vehicle {vehicle.vehicle_id} - {response.status}")
                        
            except Exception as e:
                print(f"‚ùå Error registering vehicle {vehicle.vehicle_id}: {e}")
    
    async def run_simulation(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≠‡∏á‡∏£‡∏ñ"""
        print("=" * 60)
        print("üöó GPS Vehicle Fleet Simulator")
        print("=" * 60)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≠‡∏á‡∏£‡∏ñ
        self.create_fleet()
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        async with aiohttp.ClientSession() as session:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            try:
                async with session.get(f"{self.server_url}/health", timeout=aiohttp.ClientTimeout(total=5)) as response:
                    if response.status == 200:
                        print("‚úÖ Server is running")
                    else:
                        print("‚ùå Server is not responding properly")
                        return
            except Exception as e:
                print(f"‚ùå Cannot connect to server: {e}")
                print("Please make sure the GPS tracking server is running on port 17890")
                return
            
            # ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
            print("\nüìù Registering vehicles...")
            await self.register_vehicles(session)
            
            # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà
            await asyncio.sleep(2)
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
            print("\nüöÄ Starting fleet simulation...")
            print("üìç Vehicles will start sending GPS data")
            print("üó∫Ô∏è  Open http://localhost:17890 to see the map")
            print("‚èπÔ∏è  Press Ctrl+C to stop")
            print("-" * 60)
            
            # ‡∏£‡∏±‡∏ô‡∏£‡∏ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
            tasks = [vehicle.run(session) for vehicle in self.vehicles]
            await asyncio.gather(*tasks)

async def main():
    """Main function"""
    simulator = FleetSimulator()
    await simulator.run_simulation()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Simulation stopped by user")
    except Exception as e:
        print(f"\n‚ùå Simulation error: {e}")
